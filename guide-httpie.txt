================================================================================
# 添加一条snippet数据

# 使用`POST`方法的`json格式`,提交数据：
----------------------
http --json POST http://127.0.0.1:8000/snippets/ code="Django Grils"
----------------------
下列方法不行：
----------------------
http --form POST http://127.0.0.1:8000/snippets/ code="Django Boys"
----------------------
================================================================================


================================================================================
===========================
如果我们要增添数据怎么办？我们可以控制 Content-Type 头部信息来提交POST请求：

http --form POST http://127.0.0.1:8000/snippets/ code="print 123"
http --json POST http://127.0.0.1:8000/snippets/ code="print 456"
===========================

=====================================================
# 当你运行`http --form POST`命令，提交时，会报错：
-----------------------
$http --form POST http://127.0.0.1:8000/snippets/ code="Django Boys"
------------------------
结果运行如下：
-----------------------
File "/home/user/project/django-rest-framework/official-tutorial/tutorial/snippets/views.py", line 25, in snippet_list
    data = JSONParser().parse(request)
  File "/home/user/project/django-rest-framework/official-tutorial/env/local/lib/python2.7/site-packages/rest_framework/parsers.py", line 70, in parse
    raise ParseError('JSON parse error - %s' % six.text_type(exc))
ParseError: JSON parse error - No JSON object could be decoded
[03/Jun/2018 12:32:01] "POST /snippets/ HTTP/1.1" 500 78908
------------------------
原因是因为我的`视图函数`-`snippet_list`,里面是用`data = JSONParser().parse(request)`，去解析上传上来的数据。
结果我们使用`--form`格式，不是它喜欢的`json格式`，所以，解析就报错了。
=====================================================
================================================================================


================================================================================
## 查看`某一个snippet`

------------------------
$http http://127.0.0.1:8000/snippets/4/
------------------------

## 修改`某一个snippet`
------------------------
$http PUT http://127.0.0.1:8000/snippets/4/ code="Django Boys"
------------------------

结果如下：
------------------------------------------------
user@osgeolive:~/project/django-rest-framework/official-tutorial/tutorial$ http  http://127.0.0.1:8000/snippets/4/
HTTP/1.0 200 OK
Content-Length: 107
Content-Type: application/json
Date: Sun, 03 Jun 2018 13:07:53 GMT
Server: WSGIServer/0.1 Python/2.7.12
X-Frame-Options: SAMEORIGIN

{
    "code": "Django Grils", 
    "id": 4, 
    "language": "python", 
    "linenos": false, 
    "style": "friendly", 
    "title": ""
}

------------------------
user@osgeolive:~/project/django-rest-framework/official-tutorial/tutorial$ http PUT http://127.0.0.1:8000/snippets/4/ code="Django Boys"
HTTP/1.0 200 OK
Content-Length: 106
Content-Type: application/json
Date: Sun, 03 Jun 2018 13:08:03 GMT
Server: WSGIServer/0.1 Python/2.7.12
X-Frame-Options: SAMEORIGIN

{
    "code": "Django Boys", 
    "id": 4, 
    "language": "python", 
    "linenos": false, 
    "style": "friendly", 
    "title": ""
}
------------------------------------------------
竟然，没有出错。
因为：

JSON is the lingua franca of modern web services and it is also the implicit content type HTTPie by default uses.
`JSON`是实时的标注，所以`HTTPie`默认使用`它`作为`隐式`的`content type`.
你可以通过添加`v`参数，去查看实际的情况。

------------------------------------------------
user@osgeolive:~/project/django-rest-framework/official-tutorial/tutorial$ http -v PUT http://127.0.0.1:8000/snippets/4/ code="DjangoGirls"
PUT /snippets/4/ HTTP/1.1
Accept: application/json, */*
Accept-Encoding: gzip, deflate
Connection: keep-alive
Content-Length: 23
Content-Type: application/json
Host: 127.0.0.1:8000
User-Agent: HTTPie/0.9.9

{
    "code": "DjangoGirls"
}

HTTP/1.0 200 OK
Content-Length: 106
Content-Type: application/json
Date: Sun, 03 Jun 2018 13:12:17 GMT
Server: WSGIServer/0.1 Python/2.7.12
X-Frame-Options: SAMEORIGIN

{
    "code": "DjangoGirls", 
    "id": 4, 
    "language": "python", 
    "linenos": false, 
    "style": "friendly", 
    "title": ""
}
------------------------------------------------
发现在发送请求时，`Content-Type: application/json`.

## 删除一个`snippet`
-----------------
http DELETE http://127.0.0.1:8000/snippets/4/
-----------------
执行结果如下：

-----------------
$ http DELETE  http://127.0.0.1:8000/snippets/4/
HTTP/1.0 204 No Content
Content-Length: 0
Content-Type: text/html; charset=utf-8
Date: Sun, 03 Jun 2018 13:28:28 GMT
Server: WSGIServer/0.1 Python/2.7.12
X-Frame-Options: SAMEORIGIN
-----------------
注意： `snippets/4/`，不能丢失`/`,否则，不会删除。
================================================================================


We can control the format of the response that we get back, either by using the Accept header:
我们可以控制`response`的格式，通过使用`Accetp header`来标识。
---------------------
http http://127.0.0.1:8000/snippets/ Accept:application/json  # Request JSON
http http://127.0.0.1:8000/snippets/ Accept:text/html         # Request HTML
---------------------

Or by appending a format suffix:
或者，添加一个格式后缀：
---------------------
http http://127.0.0.1:8000/snippets.json  # JSON suffix
http http://127.0.0.1:8000/snippets.api   # Browsable API suffix
---------------------


Similarly, we can control the format of the request that we send, using the Content-Type header.
类似的，我们可以通过控制我们发送的`请求request`的`格式`，使用`Content-Type header`

# POST using form data
---------------------
http --form POST http://127.0.0.1:8000/snippets/ code="print 123"
---------------------

Now go and open the API in a web browser, by visiting http://127.0.0.1:8000/snippets/.
现在，打开你的浏览器，访问页面：
-------------
http://127.0.0.1:8000/snippets/
-------------
